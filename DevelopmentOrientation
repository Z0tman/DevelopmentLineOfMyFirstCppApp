From now on, the main question is to know : With which condition is it possible to fuse two different type from a template.

If such a template does match with the condition, I will still slack of experience in coding.

If I mistake at this stage, I may make waste people time and work for nothing.

Howewer, I also write a development guideline based on the string type.

But, if you choose to extend the prototype operator to any type operator with a greater scope, you may include the development guideline as well and you won't have

to code it at twice because your string version has compatibility issue because its method is too specific.

The greater part of the challenge for this application is to setup all your game mechanics system so you can instantiate any type of related game system component to trigger

a blending, which result may be a new type.

At my current level, it is not possible for me to perform such an extension, because I need to establish a new pipeline first in order to specify some technical points

about the template which will be instanciated into the source code to make the friend kill event possible within a larger data scope.


Then, if the imperial generator used to produce words, but if it is producing numbers, we will have to take into account the position of the number rather than its value.

The feudal group may not be words, that would be subprimes numbers...inherited from the subitem method to be implemented.

What's the difference between a prime and a subprime number ?

The main difference is that the subprime number may have the feudal group criteria that the prime number doesn't have.

At this stage, it is becoming very difficult, because if people didn't work their mathematics enough, there won't be any reliable code, not more reliable than the climate.

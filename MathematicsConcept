In the development orientation page, I mentioned the prime numbers in the case of the template application of my prototype operator would deal with numbers.

Primes numbers can be modelized simply by stating fact that only number following some conditions will be kept in memory for usage.

The big problem actually is that french people think too much about money.

They think as subprimes as an economical crisis in the USA between 2007 and 2011.

But here I regulate the way communicating by linking the fuse words method to the instructional separation as a main condition.

Subprimes here are primes number inheriting subitem method mentioned in the game development guideline.

What's the difference ?

The difference is that you can get several times the same prime number, and they won't be removed !

You're memory will be overloaded for a single condition that doesn't prove that is unique.

The subprimes are different, they follow a map access control according to 4 different classes : the imperials, the landers, the priest and the warlord.

The hypothesis I make here is :

If a prototype operator of two strings can output a fused string, it can be developped to the first phase of game prototyping by automating one of the entry.

Such automation would naturally involve a subitem method.

Then, if the prototype operator get generalized to any type of variable, in particular to the number type, the prime number through the subitem method should be called a subprime.

This process is the key point to define a new type, which will allow you then to program the friendly kill shot into a big army in a war strategy game.

it seems strange explained like that, but it is not possible to know at this stage what could happen for the prime number if combined to the subitem method.

The fuse word is more powerful than the classic number computation if well used in manual mode at his protoype stage of development.

Making it to evolve is my mission. ut if I find people more experimented able to complete my guidelines, that would be time saving in a situation where we're running out of time.
